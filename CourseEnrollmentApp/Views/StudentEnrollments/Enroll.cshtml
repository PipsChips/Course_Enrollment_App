@model CourseEnrollmentApp.ViewModels.EnrollViewModel

@{
    ViewBag.Title = "Enroll";
}

<h2>Enroll</h2>

@using (Html.BeginForm("Enroll", "StudentEnrollments", FormMethod.Post, new { @id = "ApplicationForm", @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    for (int i = 0; i < Model.CourseIds.Count(); i++)
    {
        @Html.HiddenFor(m => m.CourseIds[i]);
    }

    <fieldset form="ApplicationForm" class="col-md-5">
        <legend>Personal Information</legend>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.FirstName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.FirstName, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.LastName, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.LastName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.LastName, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.DateOfBirth, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-7" style="padding:0">
                <div class='input-group date' id='datetimepickerBirthIcon'>
                    @Html.EditorFor(m => m.Student.DateOfBirth, new { htmlAttributes = new { @class = "form-control", @id = "datetimepickerBirthText", @value = "", @placeholder = "YYYY/MM/DD", @type = "date" } })
                    <span class="input-group-addon">
                        <span class="fa fa-calendar">
                        </span>
                    </span>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.Student.DateOfBirth, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
    </fieldset>

    <fieldset form="ApplicationForm" class="col-md-5">
        <legend>Contact Information</legend>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Email, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Email, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Email, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.MobileNumber, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.MobileNumber, new { htmlAttributes = new { @class = "form-control", @value = "" } })
            @Html.ValidationMessageFor(m => m.Student.MobileNumber, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.TelephoneNumber, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.TelephoneNumber, new { htmlAttributes = new { @class = "form-control" } })
            <span class="col-md-offset-4"></span>
        </div>
    </fieldset>

    <fieldset form="ApplicationForm" class="col-md-5">
        <legend>Adress Information</legend>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Address.Country, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Address.Country, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Address.Country, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Address.City, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Address.City, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Address.City, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Address.PostalCode, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Address.PostalCode, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Address.PostalCode, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Address.Street, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Address.Street, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Address.Street, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.Address.HouseNumber, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.Address.HouseNumber, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(m => m.Student.Address.HouseNumber, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
    </fieldset>

    <fieldset form="ApplicationForm" class="col-md-5">
        <legend>Education Information (Optional)</legend>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.EducationHistory.University, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.EducationHistory.University, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.EducationHistory.Department, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.EducationHistory.Department, new { htmlAttributes = new { @class = "form-control" } })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.EducationHistory.GraduationDate, htmlAttributes: new { @class = "control-label col-md-4" })
            <div class="col-md-7" style="padding:0">
                <div class='input-group date' id='datetimepickerGraduationIcon'>
                    @Html.EditorFor(m => m.Student.EducationHistory.GraduationDate, new { htmlAttributes = new { @class = "form-control", id = "datetimepickerGraduationText", placeholder = "YYYY/MM/DD", type = "date" } })
                    <span class="input-group-addon">
                        <span class="fa fa-calendar">
                        </span>
                    </span>
                </div>
            </div>
            @Html.ValidationMessageFor(m => m.Student.EducationHistory.GraduationDate, "", new { @class = "col-md-offset-4 text-danger" })
        </div>
        <div class="form-group">
            @Html.LabelFor(m => m.Student.EducationHistory.AcademicDegree, htmlAttributes: new { @class = "control-label col-md-4" })
            @Html.EditorFor(m => m.Student.EducationHistory.AcademicDegree, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </fieldset>


    <div class="form-group alert">
        <div class="col-md-5">
            <button type="submit" value="" class="btn btn-success btn-lg btn-block" style="margin:15px; font-size: 20px;">Enroll</button>
        </div>
    </div>
}

<div class="col-md-12" style="text-align:left;">
    @Html.ActionLink("Back to List", "CoursesList", null, new { @class = "btn btn-warning", @style = "font-size: 20px" })
</div>
<br />
<br />


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script type="text/javascript">
        $(document).ready(function () {
            $(function () {
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth() + 1;
                var yyyy = today.getFullYear();

                var birthCalendarSettings = {
                    viewMode: 'years',
                    format: 'YYYY/MM/DD',
                    minDate: new Date(1900, 0, 1),
                    maxDate: new Date(yyyy - 18, mm - 1, dd),
                    icons: {
                        date: "fa fa-calendar",
                    }
                };

                var GraduationCalendarSettings = {
                    viewMode: 'years',
                    format: 'YYYY/MM/DD',
                    minDate: new Date(1930, 0, 1),
                    maxDate: new Date(yyyy, mm - 1, dd),
                    icons: {
                        date: "fa fa-calendar",
                    }
                };

                $('#datetimepickerBirthText').datetimepicker(birthCalendarSettings);

                $('#datetimepickerBirthIcon').datetimepicker(birthCalendarSettings);

                $('#datetimepickerGraduationText').datetimepicker(GraduationCalendarSettings);

                $('#datetimepickerGraduationIcon').datetimepicker(GraduationCalendarSettings);
            });
        });
    </script>
}
